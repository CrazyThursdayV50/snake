package models

import "time"

/* ======================
** DO NOT EDIT THIS FILE!
** ======================
** GENERATED WITH GOMODEL
** Time: 2025-03-21T14:14:13+08:00
** Author: Gormodel
 */

type Kline struct {
	OpenTs         int64     `gorm:"column:open_ts;type:BIGINT UNSIGNED;primaryKey;not null" json:"open_ts"`
	CloseTs        int64     `gorm:"column:close_ts;type:BIGINT UNSIGNED;uniqueIndex:uk_kline_btcusdt_1m_close_ts;not null" json:"close_ts"`
	Open           string    `gorm:"column:open;type:VARCHAR(40);size:40;not null" json:"open"`
	Close          string    `gorm:"column:close;type:VARCHAR(40);size:40;not null" json:"close"`
	Low            string    `gorm:"column:low;type:VARCHAR(40);size:40;not null" json:"low"`
	High           string    `gorm:"column:high;type:VARCHAR(40);size:40;not null" json:"high"`
	Average        string    `gorm:"column:average;type:VARCHAR(40);size:40;not null" json:"average"`
	Volume         string    `gorm:"column:volume;type:VARCHAR(40);size:40;not null" json:"volume"`
	Amount         string    `gorm:"column:amount;type:VARCHAR(40);size:40;not null" json:"amount"`
	TradeCount     int64     `gorm:"column:trade_count;type:INT UNSIGNED;not null" json:"trade_count"`
	TakerBuyVolume string    `gorm:"column:taker_buy_volume;type:VARCHAR(40);size:40;not null" json:"taker_buy_volume"`
	TakerBuyAmount string    `gorm:"column:taker_buy_amount;type:VARCHAR(40);size:40;not null" json:"taker_buy_amount"`
	CreatedAt      time.Time `gorm:"column:created_at;type:TIMESTAMP;not null;default:CURRENT_TIMESTAMP" json:"created_at"`
	UpdatedAt      time.Time `gorm:"column:updated_at;type:TIMESTAMP;not null;default:CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP" json:"updated_at"`
}

func kline_open_ts() Column[int64] {
	return "open_ts"
}

func (s *Kline) ColumnOpenTs() Column[int64] {
	return kline_open_ts()
}

func kline_close_ts() Column[int64] {
	return "close_ts"
}

func (s *Kline) ColumnCloseTs() Column[int64] {
	return kline_close_ts()
}

func kline_open() Column[string] {
	return "open"
}

func (s *Kline) ColumnOpen() Column[string] {
	return kline_open()
}

func kline_close() Column[string] {
	return "close"
}

func (s *Kline) ColumnClose() Column[string] {
	return kline_close()
}

func kline_low() Column[string] {
	return "low"
}

func (s *Kline) ColumnLow() Column[string] {
	return kline_low()
}

func kline_high() Column[string] {
	return "high"
}

func (s *Kline) ColumnHigh() Column[string] {
	return kline_high()
}

func kline_average() Column[string] {
	return "average"
}

func (s *Kline) ColumnAverage() Column[string] {
	return kline_average()
}

func kline_volume() Column[string] {
	return "volume"
}

func (s *Kline) ColumnVolume() Column[string] {
	return kline_volume()
}

func kline_amount() Column[string] {
	return "amount"
}

func (s *Kline) ColumnAmount() Column[string] {
	return kline_amount()
}

func kline_trade_count() Column[int64] {
	return "trade_count"
}

func (s *Kline) ColumnTradeCount() Column[int64] {
	return kline_trade_count()
}

func kline_taker_buy_volume() Column[string] {
	return "taker_buy_volume"
}

func (s *Kline) ColumnTakerBuyVolume() Column[string] {
	return kline_taker_buy_volume()
}

func kline_taker_buy_amount() Column[string] {
	return "taker_buy_amount"
}

func (s *Kline) ColumnTakerBuyAmount() Column[string] {
	return kline_taker_buy_amount()
}

func kline_created_at() Column[time.Time] {
	return "created_at"
}

func (s *Kline) ColumnCreatedAt() Column[time.Time] {
	return kline_created_at()
}

func kline_updated_at() Column[time.Time] {
	return "updated_at"
}

func (s *Kline) ColumnUpdatedAt() Column[time.Time] {
	return kline_updated_at()
}

func (t *Kline) TableName() string {
	return Schema() + ".kline"
}
